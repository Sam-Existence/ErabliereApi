{
	"info": {
		"_postman_id": "0eef1e21-cfed-4fdd-be25-f84423292b97",
		"name": "ErablièreAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6202256"
	},
	"item": [
		{
			"name": "Init",
			"item": [
				{
					"name": "Erabliere A",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.collectionVariables.set(\"ErabliereA_ID\", pm.response.json().id);\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.expect(pm.response.text()).to.contains(\"L'érablière nommé 'Érablière A' existe déjà\");\r",
									"    });\r",
									"\r",
									"    const getRequest = {\r",
									"        url: pm.request.url + \"?$filter=Nom eq 'Érablière A'\",\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'accept': 'application/json',\r",
									"            'authorization': request.headers[\"authorization\"]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"            pm.expect(error).to.be.null;\r",
									"        } else {\r",
									"            pm.test(\"Recherche Erabliere A a fonctionné\", () => {\r",
									"                pm.expect(response.code).to.eq(200);\r",
									"            });\r",
									"            pm.collectionVariables.set(\"ErabliereA_ID\", response.json()[0].id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nom\": \"Érablière A\",\r\n  \"ipRules\": \"-\",\r\n  \"indiceOrdre\": 0,\r\n  \"afficherSectionBaril\": true,\r\n  \"afficherTrioDonnees\": true,\r\n  \"afficherSectionDompeux\": true,\r\n  \"isPublic\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Erabliere A - Taux sucre capteur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Id is as expected\", function () {\r",
									"        var json = pm.response.json();\r",
									"\r",
									"        pm.expect(json.id).to.eq(\"010e708b-a7d0-449e-77e2-08d9d37ca582\");\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.expect(pm.response.text()).to.eq(\"Le capteur avec l'id '010e708b-a7d0-449e-77e2-08d9d37ca582' exite déjà\");\r",
									"    });\r",
									"\r",
									"    const getRequest = {\r",
									"        url: pm.request.url + \"/010e708b-a7d0-449e-77e2-08d9d37ca582\",\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'accept': 'application/json',\r",
									"            'authorization': request.headers[\"authorization\"]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"            pm.expect(error).to.be.null;\r",
									"        } else {\r",
									"            pm.test(\"Recherche du capteur taux de sucre à fonctionné\", () => {\r",
									"                pm.expect(response.code).to.eq(200);\r",
									"                var capteurInfo = response.json();\r",
									"                pm.expect(capteurInfo.nom).to.eq(\"Taux de sucre\");\r",
									"                pm.expect(capteurInfo.afficherCapteurDashboard).to.be.true;\r",
									"                pm.expect(capteurInfo.ajouterDonneeDepuisInterface).to.be.true;\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"010e708b-a7d0-449e-77e2-08d9d37ca582\",\r\n  \"nom\": \"Taux de sucre\",\r\n  \"symbole\": \"\",\r\n  \"dc\": \"2022-05-01T13:10:53.052Z\",\r\n  \"afficherCapteurDashboard\": true,\r\n  \"ajouterDonneeDepuisInterface\": true,\r\n  \"idErabliere\": \"{{ErabliereA_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres/{{ErabliereA_ID}}/capteurs",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{ErabliereA_ID}}",
								"capteurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Erabliere B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.collectionVariables.set(\"ErabliereB_ID\", pm.response.json().id);\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.expect(pm.response.text()).to.contains(\"L'érablière nommé 'Érablière B' existe déjà\");\r",
									"    });\r",
									"\r",
									"    const getRequest = {\r",
									"        url: pm.request.url + \"?$filter=Nom eq 'Érablière B'\",\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'accept': 'application/json',\r",
									"            'authorization': request.headers[\"authorization\"]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"            pm.expect(error).to.be.null;\r",
									"        } else {\r",
									"            pm.test(\"Recherche Erabliere B a fonctionné\", () => {\r",
									"                pm.expect(response.code).to.eq(200);\r",
									"            })\r",
									"            pm.collectionVariables.set(\"ErabliereB_ID\", response.json()[0].id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nom\": \"Érablière B\",\r\n  \"ipRules\": \"192.160.45.45\",\r\n  \"indiceOrdre\": 0,\r\n  \"afficherSectionBaril\": true,\r\n  \"afficherTrioDonnees\": true,\r\n  \"afficherSectionDompeux\": true,\r\n  \"isPublic\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Erabliere Saint-Alfred",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.collectionVariables.set(\"ErabliereSaintAlfred_ID\", pm.response.json().id);\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.expect(pm.response.text()).to.contains(\"L'érablière nommé 'Érablière Saint-Alfred' existe déjà\");\r",
									"    });\r",
									"\r",
									"    const getRequest = {\r",
									"        url: pm.request.url + \"?$filter=Nom eq 'Érablière Saint-Alfred'\",\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'accept': 'application/json',\r",
									"            'authorization': request.headers[\"authorization\"]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"            pm.expect(error).to.be.null;\r",
									"        } else {\r",
									"            pm.test(\"Recherche Erabliere Saint-Alfred a fonctionné\", () => {\r",
									"                pm.expect(response.code).to.eq(200);\r",
									"            })\r",
									"            pm.collectionVariables.set(\"ErabliereSaintAlfred_ID\", response.json()[0].id);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nom\": \"Érablière Saint-Alfred\",\r\n  \"ipRules\": \"-\",\r\n  \"indiceOrdre\": 0,\r\n  \"afficherSectionBaril\": true,\r\n  \"afficherTrioDonnees\": true,\r\n  \"afficherSectionDompeux\": true,\r\n  \"isPublic\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flow 1",
			"item": [
				{
					"name": "Obtenir la liste des érablières",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vérifier format réponse\", () => {\r",
									"    const listeErabliere = pm.response.json();\r",
									"\r",
									"    pm.expect(listeErabliere).to.ownProperty(\"length\");\r",
									"\r",
									"    pm.expect(listeErabliere.length).to.be.lessThan(21);\r",
									"\r",
									"    pm.collectionVariables.set(\"nombreErabliere\", parseInt(pm.response.headers.get(\"X-ErabliereTotal\")));\r",
									"\r",
									"    console.log(\"/erablieres return \" + listeErabliere.length + \" erablières. With a total of \" + \r",
									"        pm.response.headers.get(\"X-ErabliereTotal\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ajouter une nouvelle érablière",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"\r",
									"    var responseObj = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"idErabliere\", responseObj.id);\r",
									"\r",
									"    console.log(\"idErabliere \" + pm.collectionVariables.get(\"idErabliere\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"nomErabliere\", pm.variables.replaceIn(\"{{$randomWords}}\").substr(0, 50));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nom\": \"{{nomErabliere}}\",\r\n  \"isPublic\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Trouver l'érablière dans la liste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vérifier format réponse\", () => {\r",
									"    const listeErabliere = pm.response.json();\r",
									"\r",
									"    pm.expect(listeErabliere).to.ownProperty(\"length\");\r",
									"\r",
									"    pm.expect(listeErabliere.length).to.eq(1);\r",
									"\r",
									"    pm.expect(parseInt(pm.response.headers.get(\"X-ErabliereTotal\"))).to.eq(pm.collectionVariables.get(\"nombreErabliere\") + 1)\r",
									"\r",
									"    pm.collectionVariables.set(\"nombreErabliere\", listeErabliere.length);\r",
									"\r",
									"    const erabliere = listeErabliere.find(e => e.nom == pm.collectionVariables.get(\"nomErabliere\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"idErabliere\", erabliere.id);\r",
									"\r",
									"    console.log(\"Id de l'érablière : \" + pm.collectionVariables.get(\"idErabliere\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres?$filter=nom eq '{{nomErabliere}}'",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							],
							"query": [
								{
									"key": "$filter",
									"value": "nom eq '{{nomErabliere}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Données - Aucune donnée, nouvelle érablière",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vérifier format réponse\", () => {\r",
									"    const listeErabliere = pm.response.json();\r",
									"\r",
									"    pm.expect(listeErabliere).to.ownProperty(\"length\");\r",
									"\r",
									"    pm.expect(listeErabliere.length).to.eq(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres/{{idErabliere}}/donnees",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{idErabliere}}",
								"donnees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ajouter une nouvelle donnée",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"dateDonnee\", new Date(new Date() - 1000 * 60 * 60 * 24 * 7).toISOString()); // Aujourd'hui - une semaine"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": -15,\r\n  \"nb\": 0,\r\n  \"v\": 0,\r\n  \"idErabliere\": \"{{idErabliere}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres/{{idErabliere}}/donnees",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{idErabliere}}",
								"donnees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Données - Une donnée",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vérifier format réponse\", () => {\r",
									"    const listeErabliere = pm.response.json();\r",
									"\r",
									"    pm.expect(listeErabliere).to.ownProperty(\"length\");\r",
									"\r",
									"    pm.expect(listeErabliere.length).to.eq(1);\r",
									"\r",
									"    const donnee = listeErabliere[0];\r",
									"\r",
									"    pm.expect(new Date(donnee.d).toISOString()).to.eq(new Date(pm.collectionVariables.get(\"dateDonnee\")).toISOString());\r",
									"    pm.expect(donnee.t).to.eq(-15);\r",
									"    pm.expect(donnee.v).to.eq(0);\r",
									"    pm.expect(donnee.nb).to.eq(0);\r",
									"    pm.expect(donnee.nboc).to.eq(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres/{{idErabliere}}/donnees",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{idErabliere}}",
								"donnees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ajouter une nouvelle donnée Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"dateDonnee\", new Date(new Date() - (1000 * 60 * 60 * 24 * 7) + (1000 * 60)).toISOString()); // Aujourd'hui - une semaine + une minute"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": -16,\r\n  \"nb\": 0,\r\n  \"v\": 0,\r\n  \"idErabliere\": \"{{idErabliere}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres/{{idErabliere}}/donnees",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{idErabliere}}",
								"donnees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Données -Deux données",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vérifier format réponse\", () => {\r",
									"    const listeErabliere = pm.response.json();\r",
									"\r",
									"    pm.expect(listeErabliere).to.ownProperty(\"length\");\r",
									"\r",
									"    pm.expect(listeErabliere.length).to.eq(2);\r",
									"\r",
									"    const donnee = listeErabliere[1];\r",
									"\r",
									"    pm.expect(new Date(donnee.d).toISOString()).to.eq(new Date(pm.collectionVariables.get(\"dateDonnee\")).toISOString());\r",
									"    pm.expect(donnee.t).to.eq(-16);\r",
									"    pm.expect(donnee.v).to.eq(0);\r",
									"    pm.expect(donnee.nb).to.eq(0);\r",
									"    pm.expect(donnee.nboc).to.eq(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres/{{idErabliere}}/donnees",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{idErabliere}}",
								"donnees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Supprimer l'érablière du flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{idErabliere}}\",\r\n    \"nom\": \"{{nomErabliere}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/erablieres/{{idErabliere}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres",
								"{{idErabliere}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valider la suppression de l'érablière",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vérifier status réponse.\", () => {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vérifier format réponse\", () => {\r",
									"    const listeErabliere = pm.response.json();\r",
									"\r",
									"    pm.expect(listeErabliere).to.ownProperty(\"length\");\r",
									"\r",
									"    pm.expect(listeErabliere.length).to.eq(pm.collectionVariables.get(\"nombreErabliere\") - 1);\r",
									"\r",
									"    pm.collectionVariables.set(\"nombreErabliere\", listeErabliere.length);\r",
									"\r",
									"    const erabliere = listeErabliere.find(e => e.id == pm.collectionVariables.get(\"idErabliere\"));\r",
									"\r",
									"    pm.expect(erabliere).to.eq(undefined);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres?$filter=nom eq '{{nomErabliere}}'",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							],
							"query": [
								{
									"key": "$filter",
									"value": "nom eq '{{nomErabliere}}'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Preset alimentation",
			"item": [
				{
					"name": "Erabliere 1",
					"item": [
						{
							"name": "Ajouter une nouvelle donnée",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dateDonnee\", new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": {{temperature}},\r\n  \"nb\": {{niveauBassin}},\r\n  \"v\": {{vaccium}},\r\n  \"idErabliere\": \"{{ErabliereA_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereA_ID}}/donnees",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereA_ID}}",
										"donnees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter une nouveau dompeux",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const maintenant = new Date().toISOString();\r",
											"\r",
											"pm.collectionVariables.set(\"dateDonnee\", maintenant);\r",
											"\r",
											"pm.collectionVariables.set(\"dd\", new Date(new Date() - 1000 * 60).toISOString());\r",
											"pm.collectionVariables.set(\"de\", maintenant);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"t\": \"{{dateDonnee}}\",\r\n  \"dd\": \"{{dd}}\",\r\n  \"df\": \"{{de}}\",\r\n  \"idErabliere\": \"{{ErabliereA_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereA_ID}}/dompeux",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereA_ID}}",
										"dompeux"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Erabliere 2",
					"item": [
						{
							"name": "Ajouter une nouvelle donnée",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dateDonnee\", new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(400); // Validation de l'ip\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": {{temperature}},\r\n  \"nb\": {{niveauBassin}},\r\n  \"v\": {{vaccium}},\r\n  \"idErabliere\": \"{{ErabliereB_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereB_ID}}/donnees",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereB_ID}}",
										"donnees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter une nouveau dompeux",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const maintenant = new Date().toISOString();\r",
											"\r",
											"pm.collectionVariables.set(\"dateDonnee\", maintenant);\r",
											"\r",
											"pm.collectionVariables.set(\"dd\", new Date(new Date() - 1000 * 60).toISOString());\r",
											"pm.collectionVariables.set(\"de\", maintenant);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(400); // Validation de l'ip\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"t\": \"{{dateDonnee}}\",\r\n  \"dd\": \"{{dd}}\",\r\n  \"df\": \"{{de}}\",\r\n  \"idErabliere\": \"{{ErabliereB_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereB_ID}}/dompeux",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereB_ID}}",
										"dompeux"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Erabliere 3",
					"item": [
						{
							"name": "Ajouter une nouvelle donnée",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dateDonnee\", new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": {{temperature}},\r\n  \"nb\": {{niveauBassin}},\r\n  \"v\": {{vaccium}},\r\n  \"idErabliere\": \"{{ErabliereSaintAlfred_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereSaintAlfred_ID}}/donnees",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereSaintAlfred_ID}}",
										"donnees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter une nouvelle donnée il y a 11h",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var twelveHours = 1000 * 60 * 60 * 11;\r",
											"\r",
											"pm.collectionVariables.set(\"dateDonnee\", new Date(Date.now() - twelveHours).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": {{temperature}},\r\n  \"nb\": {{niveauBassin}},\r\n  \"v\": {{vaccium}},\r\n  \"idErabliere\": \"{{ErabliereSaintAlfred_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereSaintAlfred_ID}}/donnees",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereSaintAlfred_ID}}",
										"donnees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter une nouvelle donnée il y a 11h Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var twentyTwoHours = 1000 * 60 * 60 * 22;\r",
											"\r",
											"pm.collectionVariables.set(\"dateDonnee\", new Date(Date.now() - twentyTwoHours).toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"d\": \"{{dateDonnee}}\",\r\n  \"t\": {{temperature}},\r\n  \"nb\": {{niveauBassin}},\r\n  \"v\": {{vaccium}},\r\n  \"idErabliere\": \"{{ErabliereSaintAlfred_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereSaintAlfred_ID}}/donnees",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereSaintAlfred_ID}}",
										"donnees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter une nouveau dompeux",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const maintenant = new Date().toISOString();\r",
											"\r",
											"pm.collectionVariables.set(\"dateDonnee\", maintenant);\r",
											"\r",
											"pm.collectionVariables.set(\"dd\", new Date(new Date() - 1000 * 60).toISOString());\r",
											"pm.collectionVariables.set(\"de\", maintenant);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"t\": \"{{dateDonnee}}\",\r\n  \"dd\": \"{{dd}}\",\r\n  \"df\": \"{{de}}\",\r\n  \"idErabliere\": \"{{ErabliereSaintAlfred_ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{ErabliereSaintAlfred_ID}}/dompeux",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{ErabliereSaintAlfred_ID}}",
										"dompeux"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"function temperature() {",
							"  var date = new Date();",
							"  var m = date.getMonth();",
							"  var doy = date.getDay();",
							"  var hod = date.getHours();",
							"  return Math.floor((12 * Math.sin((doy-105)*Math.PI/182.5)) + (5*Math.sin(doy*4)) + (5 * Math.sin((hod - 7) * 3.14159 / 12)) * 10);",
							"}",
							"",
							"function vaccium(t) {",
							"  var vaccium = 0",
							"  if (t >= -1 - pm.collectionVariables.get('idErabliere')) {",
							"    vaccium = 243",
							"  }",
							"  if (t > 3) {",
							"      vaccium += 5;",
							"  }",
							"  return vaccium;",
							"}",
							"",
							"function niveauBassin() {",
							"  niveauBassin = 0",
							"  return niveauBassin",
							"}",
							"",
							"pm.collectionVariables.set('temperature', temperature());",
							"pm.collectionVariables.set('vaccium', vaccium(pm.collectionVariables.get('temperature')));",
							"pm.collectionVariables.set('niveauBassin', niveauBassin());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DonneesCapteur",
			"item": [
				{
					"name": "PreRequis",
					"item": [
						{
							"name": "Ajouter une nouvelle érablière",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Vérifier status réponse.\", () => {\r",
											"    pm.expect(pm.response.code).to.eq(200);\r",
											"\r",
											"    pm.collectionVariables.set('idErabliere', pm.response.json().id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nomErabliere\", pm.variables.replaceIn(\"{{$randomWords}}\").substr(0, 50));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nom\": \"{{nomErabliere}}\",\r\n  \"isPublic\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ajouter un capteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nom\": \"{{$randomWord}}\",\r\n    \"idErabliere\": \"{{idErabliere}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/erablieres/{{idErabliere}}/capteurs",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{idErabliere}}",
										"capteurs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtenir l'id du capteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var capteurs = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"idCapteur\", capteurs[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/erablieres/{{idErabliere}}/capteurs",
									"host": [
										"{{url}}"
									],
									"path": [
										"erablieres",
										"{{idErabliere}}",
										"capteurs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FeedSensor",
					"item": [
						{
							"name": "Envoyer Donnée Capteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"V\": {{$randomInt}},\r\n    \"idCapteur\": \"{{idCapteur}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/Capteurs/{{idCapteur}}/DonneesCapteur",
									"host": [
										"{{url}}"
									],
									"path": [
										"Capteurs",
										"{{idCapteur}}",
										"DonneesCapteur"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "OData",
			"item": [
				{
					"name": "Dashboard OData request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/erablieres?$expand=capteurs($filter=afficherCapteurDashboard eq true)",
							"host": [
								"{{url}}"
							],
							"path": [
								"erablieres"
							],
							"query": [
								{
									"key": "$expand",
									"value": "capteurs($filter=afficherCapteurDashboard eq true)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Swagger",
			"item": [
				{
					"name": "Valider obtention du json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/swagger.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"swagger.json"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "{{currentAccessToken}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get(\"Authentification.Activee\") == \"true\") {",
					"    const echoPostRequest = {",
					"        url: pm.environment.get(\"Authentification.Url\"),",
					"        method: 'POST',",
					"        header: 'Content-Type:application/x-www-form-urlencoded\\nAuthorization:Basic cmFzcGJlcnJ5bG9jYWw6c2VjcmV0',",
					"        body: {",
					"            mode: 'application/x-www-form-urlencoded',",
					"            raw: \"grant_type=client_credentials&scope=erabliereapi\"",
					"        }",
					"    };",
					"",
					"    var getToken = true;",
					"",
					"    if (!pm.environment.get('accessTokenExpiry') || ",
					"        !pm.environment.get('currentAccessToken')) {",
					"        console.log('Token or expiry date are missing')",
					"    } else if (pm.environment.get('accessTokenExpiry') <= (new Date()).getTime()) {",
					"        console.log('Token is expired')",
					"    } else {",
					"        getToken = false;",
					"        //console.log('Token and expiry date are all good');",
					"    }",
					"",
					"    if (getToken === true) {",
					"        pm.sendRequest(echoPostRequest, function (err, res) {",
					"        console.log(err ? err : res.json());",
					"            if (err === null) {",
					"                //console.log('Saving the token and expiry date')",
					"                var responseJson = res.json();",
					"                pm.environment.set('currentAccessToken', responseJson.access_token)",
					"        ",
					"                var expiryDate = new Date();",
					"                expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"                pm.environment.set('accessTokenExpiry', expiryDate.getTime());",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// console.log(\"Requete : \");",
					"// console.log(pm.request.body);",
					"// console.log(\"Reponse : \");",
					"// console.log(pm.response.text());"
				]
			}
		}
	],
	"variable": [
		{
			"key": "nombreErabliere",
			"value": 3
		},
		{
			"key": "nomErabliere",
			"value": "Nebraska aggregate card Future"
		},
		{
			"key": "idErabliere",
			"value": 2
		},
		{
			"key": "dateDonnee",
			"value": "2021-03-27T16:37:25.965Z"
		},
		{
			"key": "dd",
			"value": "2021-03-27T16:36:25.966Z"
		},
		{
			"key": "de",
			"value": "2021-03-27T16:37:25.965Z"
		},
		{
			"key": "temperature",
			"value": ""
		},
		{
			"key": "vaccium",
			"value": ""
		},
		{
			"key": "niveauBassin",
			"value": ""
		},
		{
			"key": "idCapteur",
			"value": ""
		},
		{
			"key": "ErabliereA_ID",
			"value": ""
		},
		{
			"key": "ErabliereB_ID",
			"value": ""
		},
		{
			"key": "ErabliereSaintAlfred_ID",
			"value": ""
		}
	]
}